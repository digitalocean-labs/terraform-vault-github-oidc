---
name: End-to-End Tests

on:
  # Be very careful using this! Everything under this trigger should be locked behind an Environment Approval
  pull_request_target:
    branches:
      - main

jobs:
  # This job runs tests to ensure the test environment is working as expected.
  # This runs in parallel with our 'actual' OIDC tests so that,
  # if an error occurs, we can be confident whether we broke the
  # testing environment or if an error exists in the OIDC module
  # without waiting on both serially.
  test-harness:
    runs-on: ubuntu-latest
    environment: E2E
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v3.3.0
        with:
          go-version-file: test/terratest/go.mod

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false

      - name: Run Tests
        run: make test
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      # If terratest failed to clean up the cloud resources, let's do that now.
      - name: Cleanup if failed
        if: failure()
        run: make test-cleanup
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

  oidc-test:
    runs-on: ubuntu-latest
    environment: E2E

    # These permissions must be set in order to successfully bind a GitHub OIDC token.
    # A simpler end user example of an OIDC workflow is here:
    # https://github.com/artis3n/github-oidc-vault-example/blob/main/.github/workflows/vault.yml
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go
        uses: actions/setup-go@v3.3.0
        with:
          go-version-file: test/terratest/go.mod

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false

      # This creates a Vault server on a DigitalOcean droplet
      # and runs this module, as can be seen in test/configure-oidc.
      # Also goes in and grabs the IP address for this temporary Vault server.
      - name: Setup Vault With OIDC
        id: setup-vault
        run: |
          make init
          make test-apply
          VAULT_IP="$(cd test/terratest/prepare-server && terraform output vault_ip | sed 's/\"//g')"
          echo "::set-output name=VAULT_IP::${VAULT_IP}"
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      # We've configured Vault, so now let's act as a user and try to read secrets!
      #
      # See test/configure-oidc/main.tf
      #
      # We've configured the Environment E2E to be allowed to read the
      # secret path "secret/data/foo/bar".
      # We are unable to read "secret/data/main/secret".
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.4.2
        id: secrets
        with:
          exportEnv: false
          url: https://${{ steps.setup-vault.outputs.VAULT_IP }}:8200
          # This test vault uses a self-signed cert
          tlsSkipVerify: true
          path: github-actions
          method: jwt
          role: oidc-ci-test
          secrets: |
            secret/data/foo/bar fi | MY_SECRET

      - name: Prove access to secrets
        run: |
          [[ "${{ steps.secrets.outputs.MY_SECRET }}" == "fofum" ]]

      # The 'oidc-ci-test' role is not granted a policy to read
      # 'secret/data/main/secret' so this will successfully authenticate
      # but fail to pull the 'cdsecret' secret.
      - name: Attempt to read secrets outside bound OIDC policy
        uses: hashicorp/vault-action@v2.4.2
        id: failed-secrets1
        continue-on-error: true
        with:
          exportEnv: false
          url: https://${{ steps.setup-vault.outputs.VAULT_IP }}:8200
          # This test vault uses a self-signed cert
          tlsSkipVerify: true
          path: github-actions
          method: jwt
          role: oidc-ci-test
          secrets: |
            secret/data/main/secret cdsecret | CANT_ACCESS_SECRET

      - name: We cannot access this secret
        run: |
          [[ "${{ steps.failed-secrets1.outputs.CANT_ACCESS_SECRET }}" == "" ]]

      # The oidc-cd-test role is bound to the 'main' branch of this repository
      # so it cannot be bound to a job running from another branch or a fork.
      # This will fail to authenticate.
      - name: Attempt to access another OIDC role
        uses: hashicorp/vault-action@v2.4.2
        id: failed-secrets2
        continue-on-error: true
        with:
          exportEnv: false
          url: https://${{ steps.setup-vault.outputs.VAULT_IP }}:8200
          # This test vault uses a self-signed cert
          tlsSkipVerify: true
          path: github-actions
          method: jwt
          role: oidc-cd-test
          secrets: |
            secret/data/main/secret cdsecret | CANT_ACCESS_SECRET

      - name: Teardown Vault
        if: always()
        run: make test-cleanup
        env:
          TF_VAR_do_token: ${{ secrets.DIGITALOCEAN_TOKEN }}

  lint-packer:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: E2E

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Packer
        run: brew install packer

      - name: Initialize Packer
        run: packer init .
        working-directory: test/packer

      - name: Template Format Check
        run: packer fmt -check .
        working-directory: test/packer

      - name: Validate Template
        run: packer validate .
        working-directory: test/packer
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
